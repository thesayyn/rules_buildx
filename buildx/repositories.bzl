"Toolchain repos for BuildX"

load("@aspect_bazel_lib//lib:repo_utils.bzl", "repo_utils")
load("//buildx/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//buildx/private:versions.bzl", "BUILDX_VERSIONS")

_DOC = "Fetch external tools needed for buildx toolchain"
_ATTRS = {
    "buildx_version": attr.string(mandatory = True, values = BUILDX_VERSIONS.keys()),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _buildx_repo_impl(rctx):
    url = "https://github.com/docker/buildx/releases/download/v{version}/buildx-v{version}.{}".format(
        rctx.attr.platform,
        version = rctx.attr.buildx_version,
    )
    rctx.download(
        url = [url],
        sha256 = BUILDX_VERSIONS[rctx.attr.buildx_version][rctx.attr.platform],
        executable = True,
        output = "buildx",
    )
    build_content = """# Generated by buildx/repositories.bzl
# QUICK HACK
load("@buildx_configuration//:defs.bzl", "TARGET_COMPATIBLE_WITH")

load("@rules_buildx//buildx:toolchain.bzl", "buildx_toolchain")

buildx_toolchain(
    name = "buildx_toolchain",
    buildx = ":buildx{ext}",
)
"""

    # Base BUILD file for this repository
    # TODO: windows
    rctx.file("BUILD.bazel", build_content.format(ext = ""))

buildx_repo = repository_rule(
    _buildx_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

def _impl_configure_buildx(rctx):
    # Its okay to restart repository here.
    buildx = rctx.attr.buildx if rctx.attr.buildx else Label("@buildx_%s//buildx" % repo_utils.platform(rctx).replace("_", "-"))
    has_docker = False

    # See if standard docker sock exists
    if not has_docker:
        r = rctx.execute(["stat", "/var/run/docker.sock"])
        if r.return_code == 0:
            has_docker = True

    compatible_with = "[]"
    builder_name = "rules_buildx_builder"
    if has_docker:
        buildx = rctx.path(buildx)
        r = rctx.execute([buildx, "ls"])
        if not builder_name in r.stdout:
            r = rctx.execute([buildx, "create", "--name", builder_name, "--driver", "docker-container", "--use", "--bootstrap"])
            if r.return_code != 0:
                fail("Failed to create buildx driver %s: \nSTDERR:\n%s\nsSTDOUT:\n%s" % (builder_name, r.stderr, r.stdout))

    else:
        compatible_with = '["@platforms//:incompatible"]'

    rctx.file("defs.bzl", """
# Generated by configure_buildx.bzl
load("@aspect_bazel_lib//lib:run_binary.bzl", "run_binary")
load("@aspect_bazel_lib//lib:copy_file.bzl", "copy_file")

TARGET_COMPATIBLE_WITH = %s
BUILDER_NAME = "%s"
""" % (compatible_with, builder_name))
    rctx.file("BUILD.bazel", '''exports_files(["defs.bzl"])''')

configure_buildx = repository_rule(
    implementation = _impl_configure_buildx,
    local = True,
    attrs = {
        "buildx": attr.label(),
    },
)

# Wrapper macro around everything above, this is the primary API
def buildx_register_toolchains(name = "buildx", buildx_version = "0.22.0", register = True, host_platform = None, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "buildx_linux_amd64"
    - TODO: create a convenience repository for the host platform like "buildx_host"
    - create a repository exposing toolchains for each platform like "buildx_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "buildx1_14"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        buildx_version: buildx version to use
        host_platform: internal.
        **kwargs: passed to each buildx_repositories call
    """
    for platform in PLATFORMS.keys():
        buildx_repo(
            name = name + "_" + platform,
            platform = platform,
            buildx_version = buildx_version,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    configure_buildx(
        name = name + "_configuration",
        buildx = "@buildx_%s//:buildx" % host_platform.replace("_", "-") if host_platform else None,
    )

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
